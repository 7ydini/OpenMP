#include<omp.h>
#include <string>
#include <iostream>
#include <ctime>
#include<algorithm> 
using namespace std;
//int fun1(int* A, int* B, int i, int t);
//int fun2(int* A, int* B, int i, int t);
int main()
{
	setlocale(LC_ALL, "Russian");
	srand(time(NULL));
	int j;
	int N;
	cout << "Кол-во элементов массивов A и B >>>";
	cin >> N;
	int* a = new int[N];//объявление динамического массива
	for (int i = 0; i < N; i++)//Заполнение случайными числами
	{
		a[i] = rand() % 1000;
	}
	int* b = new int[N];
	for (int i = 0; i < N; i++)
	{
		b[i] = rand() % 1000;
	}
	double time = omp_get_wtime();
	int total = 0, total2 = 0, sum = 0, s;
		for (int j = 0; j < N; j++)
		{
#pragma omp sections private(sum)
			{
#pragma omp section		//First section	
				{
					sum = a[j] + b[j];
					if (sum > 1 && total < sum)
					{
						total = sum;

					}
				}
#pragma omp section		//Second section
				{
					sum = 4 * a[j] - b[j];
					if (sum > 1 && total2 < sum)
					{
						total2 = sum;

					}
				}
				
			}
		}
		if (total > total2)
		{
			cout << "Сумма значений MAX(A[i] + B[i],4*A[i] - B[i]) равна>>" << total << "\n";
		}
		else
		{
			cout << "Сумма значений MAX(A[i] + B[i],4*A[i] - B[i]) равна>>" << total2 << "\n";
		}

double end = omp_get_wtime();
cout << omp_get_wtime() - time << endl;
}
/*int fun1(int* A, int* B, int i, int t) {
	int sum = A[i] + B[i];
	if (sum > 1 && t < sum)
	{
		t = sum;
	}
	return t;
}
int fun2(int* A, int* B, int i, int t2) {
	int sum = 4 * A[i] - B[i];
	if (sum > 1 && t2 < sum)
	{
		t2 = sum;
	}
	return t2;
}
*/
//При создании массивов на 1 000 000 элементов 
//Используя секции выходит 0., а без 0., что в  раз.
